name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  DOCKER_IMAGE: codecrasher2/todoapp
  DOCKER_BUILDKIT: 1

jobs:
  build-test:
    runs-on: ubuntu-latest
    name: Build & Test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal
      continue-on-error: true  # Eftersom inga tester finns än

    - name: Publish application
      run: dotnet publish --no-restore --configuration Release --output ./publish

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    name: Docker Build & Push
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build-test, docker-build]
    name: Deploy to AWS
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate GitHub Secrets
      run: |
        if [ -z "${{ secrets.BASTION_HOST }}" ]; then
          echo "ERROR: BASTION_HOST secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.MANAGER_PRIVATE_IP }}" ]; then
          echo "ERROR: MANAGER_PRIVATE_IP secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.DEPLOY_KEY }}" ]; then
          echo "ERROR: DEPLOY_KEY secret is not set"
          exit 1
        fi
        echo "All required secrets are present"

    - name: Setup SSH for Bastion
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # SSH config för bastion jump host
        cat > ~/.ssh/config << 'EOF'
        Host bastion
          HostName ${{ secrets.BASTION_HOST }}
          User ec2-user
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          ConnectTimeout 30

        Host manager
          HostName ${{ secrets.MANAGER_PRIVATE_IP }}
          User ec2-user
          IdentityFile ~/.ssh/id_rsa
          ProxyJump bastion
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          ConnectTimeout 30
        EOF

    - name: Test SSH via Bastion
      run: |
        echo "Testing SSH connection to bastion..."
        ssh bastion "echo 'Bastion connection successful'"

        echo "Testing SSH connection to manager via bastion..."
        ssh manager "docker --version"

    - name: Deploy via Bastion
      run: |
        echo "Copying deployment files via bastion..."
        scp scripts/deploy.sh docker-compose.yml manager:~/

        echo "Executing deployment on manager node..."
        ssh manager << 'EOF'
          chmod +x ~/deploy.sh
          ~/deploy.sh "${{ env.DOCKER_IMAGE }}:latest"
        EOF

    - name: Health Check
      run: |
        sleep 60
        for i in {1..6}; do
          if curl -f -s http://${{ secrets.ALB_DNS_NAME }}/health >/dev/null; then
            echo "Health check passed"
            exit 0
          fi
          sleep 30
        done
        echo "Health check failed"
        exit 1

    - name: Post-deployment
      run: |
        echo "Deployment completed"
        echo "Application: http://${{ secrets.ALB_DNS_NAME }}"

  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    name: Rollback on Failure
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH for Rollback
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # SSH config för bastion jump host
        cat > ~/.ssh/config << 'EOF'
        Host bastion
          HostName ${{ secrets.BASTION_HOST }}
          User ec2-user
          IdentityFile ~/.ssh/id_rsa
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null

        Host manager
          HostName ${{ secrets.MANAGER_PRIVATE_IP }}
          User ec2-user
          IdentityFile ~/.ssh/id_rsa
          ProxyJump bastion
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
        EOF

    - name: Rollback via Bastion
      run: |
        ssh manager << 'EOF'
          docker service rollback todoapp_todoapp || docker service update --image codecrasher2/todoapp:latest todoapp_todoapp
        EOF

