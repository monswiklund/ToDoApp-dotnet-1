name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  DOCKER_IMAGE: codecrasher2/todoapp
  DOCKER_BUILDKIT: 1

jobs:
  docker-build:
    runs-on: ubuntu-latest
    name: Build & Push Docker Image
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Generate build summary
      run: |
        echo "### Docker Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Image**: \`${{ env.DOCKER_IMAGE }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Tags**: \`${{ steps.meta.outputs.tags }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Platforms**: \`linux/amd64, linux/arm64\`" >> $GITHUB_STEP_SUMMARY

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH via Bastion
      uses: ./.github/actions/setup-ssh
      with:
        deploy-key: ${{ secrets.DEPLOY_KEY }}
        bastion-host: ${{ secrets.BASTION_HOST }}
        manager-private-ip: ${{ secrets.MANAGER_PRIVATE_IP }}

    - name: Save current image digest (for rollback)
      id: current
      run: |
        CURRENT_IMAGE=$(ssh manager "docker service inspect todoapp_todoapp --format '{{.Spec.TaskTemplate.ContainerSpec.Image}}' 2>/dev/null || echo 'none'")
        echo "current-image=$CURRENT_IMAGE" >> $GITHUB_OUTPUT
        echo "Previous image: $CURRENT_IMAGE"

    - name: Deploy to Swarm
      run: |
        echo "Copying deployment files..."
        scp -q scripts/deploy.sh docker-compose.yml manager:~/

        echo "Executing deployment..."
        ssh manager << 'EOF'
          chmod +x ~/deploy.sh
          ~/deploy.sh "${{ env.DOCKER_IMAGE }}:latest"
        EOF

    - name: Health check with exponential backoff
      run: |
        echo "Starting health checks..."
        attempt=1
        max_attempts=8
        wait_time=5

        while [ $attempt -le $max_attempts ]; do
          echo "Health check attempt $attempt/$max_attempts (waiting ${wait_time}s)..."

          if curl -f -s -m 10 http://${{ secrets.ALB_DNS_NAME }}/health >/dev/null 2>&1; then
            echo "✓ Health check passed!"
            exit 0
          fi

          if [ $attempt -lt $max_attempts ]; then
            sleep $wait_time
            wait_time=$((wait_time * 2))  # Exponential backoff
          fi

          attempt=$((attempt + 1))
        done

        echo "✗ Health check failed after $max_attempts attempts"
        exit 1

    - name: Deployment summary
      if: success()
      run: |
        echo "### Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "**Image**: \`${{ env.DOCKER_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "**Digest**: \`${{ needs.docker-build.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Application URL**: http://${{ secrets.ALB_DNS_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Health Check**: http://${{ secrets.ALB_DNS_NAME }}/health" >> $GITHUB_STEP_SUMMARY
        echo "**API Docs**: http://${{ secrets.ALB_DNS_NAME }}/swagger" >> $GITHUB_STEP_SUMMARY

    - name: Save deployment info for rollback
      if: success()
      run: |
        echo "${{ needs.docker-build.outputs.image-digest }}" > /tmp/deployed-digest.txt
        echo "Deployed digest saved for potential rollback"

  rollback:
    runs-on: ubuntu-latest
    needs: [docker-build, deploy]
    name: Rollback on Failure
    if: failure() && needs.deploy.result == 'failure'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH via Bastion
      uses: ./.github/actions/setup-ssh
      with:
        deploy-key: ${{ secrets.DEPLOY_KEY }}
        bastion-host: ${{ secrets.BASTION_HOST }}
        manager-private-ip: ${{ secrets.MANAGER_PRIVATE_IP }}

    - name: Execute rollback
      run: |
        echo "Initiating rollback..."
        ssh manager << 'EOF'
          SERVICE_NAME="todoapp_todoapp"

          # Check if service exists
          if ! docker service inspect "$SERVICE_NAME" >/dev/null 2>&1; then
            echo "Service does not exist, nothing to rollback"
            exit 0
          fi

          # Get rollback info
          echo "Current service state:"
          docker service ps "$SERVICE_NAME" --filter "desired-state=running" --no-trunc

          # Attempt automatic rollback
          echo "Executing Docker Swarm automatic rollback..."
          if docker service rollback "$SERVICE_NAME"; then
            echo "Rollback initiated successfully"

            # Wait for rollback to complete
            sleep 30
            echo "Service state after rollback:"
            docker service ps "$SERVICE_NAME" --filter "desired-state=running"
          else
            echo "Automatic rollback failed, service may need manual intervention"
            exit 1
          fi
        EOF

    - name: Rollback summary
      if: success()
      run: |
        echo "### Rollback Executed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Reason**: Deployment health check failed" >> $GITHUB_STEP_SUMMARY
        echo "**Action**: Docker Swarm automatic rollback to previous version" >> $GITHUB_STEP_SUMMARY
        echo "**Status**: Service restored to previous working state" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next Steps**: Review logs and fix the issue before redeploying" >> $GITHUB_STEP_SUMMARY