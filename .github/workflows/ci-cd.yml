name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Manual trigger

env:
  DOCKER_IMAGE: codecrasher2/todoapp
  DOCKER_BUILDKIT: 1

jobs:
  build-test:
    runs-on: ubuntu-latest
    name: Build & Test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal
      continue-on-error: true  # Eftersom inga tester finns √§n

    - name: Publish application
      run: dotnet publish --no-restore --configuration Release --output ./publish

  docker-build:
    runs-on: ubuntu-latest
    needs: build-test
    name: Docker Build & Push
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build-test, docker-build]
    name: Deploy to AWS
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate GitHub Secrets
      run: |
        if [ -z "${{ secrets.ALB_MANAGER_IP }}" ]; then
          echo "ERROR: ALB_MANAGER_IP secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.AWS_SSH_PRIVATE_KEY }}" ]; then
          echo "ERROR: AWS_SSH_PRIVATE_KEY secret is not set"
          exit 1
        fi
        echo "All required secrets are present"

    - name: Setup SSH with Enhanced Error Handling
      run: |
        echo "Setting up SSH configuration..."
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # SSH config for better connection handling
        cat > ~/.ssh/config << 'EOF'
        Host *
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          ConnectTimeout 30
          ServerAliveInterval 60
          ServerAliveCountMax 3
        EOF

        echo "Testing SSH connectivity..."
        # Retry ssh-keyscan with exponential backoff
        for i in {1..5}; do
          echo "SSH keyscan attempt $i/5..."
          if timeout 30 ssh-keyscan -H ${{ secrets.ALB_MANAGER_IP }} >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "‚úÖ SSH keyscan successful on attempt $i"
            break
          fi
          if [ $i -eq 5 ]; then
            echo "‚ùå SSH keyscan failed after 5 attempts"
            exit 1
          fi
          echo "‚è≥ Retrying in $((i*5)) seconds..."
          sleep $((i*5))
        done

    - name: Test SSH Connection
      run: |
        echo "Testing SSH connection to manager node..."
        if timeout 30 ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.ALB_MANAGER_IP }} "echo 'SSH connection successful'; docker --version; uptime"; then
          echo "‚úÖ SSH connection test passed"
        else
          echo "‚ùå SSH connection test failed"
          exit 1
        fi

    - name: Deploy to Docker Swarm with Retry Logic
      run: |
        echo "Starting deployment process..."

        # Copy files with retry logic
        for i in {1..3}; do
          echo "Copying deployment files (attempt $i/3)..."
          if scp -i ~/.ssh/id_rsa -o ConnectTimeout=30 scripts/deploy.sh ec2-user@${{ secrets.ALB_MANAGER_IP }}:~/ && \
             scp -i ~/.ssh/id_rsa -o ConnectTimeout=30 docker-compose.yml ec2-user@${{ secrets.ALB_MANAGER_IP }}:~/; then
            echo "‚úÖ File copy successful"
            break
          fi
          if [ $i -eq 3 ]; then
            echo "‚ùå File copy failed after 3 attempts"
            exit 1
          fi
          echo "‚è≥ Retrying file copy in 10 seconds..."
          sleep 10
        done

        # Execute deployment
        echo "Executing deployment on manager node..."
        ssh -i ~/.ssh/id_rsa -o ConnectTimeout=30 ec2-user@${{ secrets.ALB_MANAGER_IP }} << 'DEPLOY_EOF'
          set -e
          echo "Preparing deployment..."
          chmod +x ~/deploy.sh

          # Set deployment variables
          export DOCKER_IMAGE="${{ env.DOCKER_IMAGE }}"
          export IMAGE_TAG="${{ github.sha }}"

          echo "Starting deployment with image: ${DOCKER_IMAGE}:${IMAGE_TAG}"
          ~/deploy.sh "${DOCKER_IMAGE}:${IMAGE_TAG}"
        DEPLOY_EOF

        echo "‚úÖ Deployment completed successfully"

    - name: Health Check via ALB
      run: |
        echo "üè• Starting health check process..."
        echo "ALB DNS: ${{ secrets.ALB_DNS_NAME }}"

        # Initial wait for container startup
        echo "‚è≥ Waiting 45 seconds for containers to start..."
        sleep 45

        # Progressive health check with better error reporting
        echo "üîç Testing ALB endpoint health..."
        for i in {1..12}; do
          echo "Health check attempt $i/12..."

          # Test with detailed curl output
          if response=$(curl -f -s -w "HTTP_CODE:%{http_code} TIME:%{time_total}s" \
                           http://${{ secrets.ALB_DNS_NAME }}/health 2>&1); then
            echo "‚úÖ Health check passed!"
            echo "Response: $response"

            # Additional verification - test main app endpoint
            if curl -f -s http://${{ secrets.ALB_DNS_NAME }}/ >/dev/null; then
              echo "‚úÖ Main application endpoint also responding"
            else
              echo "‚ö†Ô∏è  Main app endpoint not responding, but health check passed"
            fi

            echo "üéâ Deployment health verification completed successfully!"
            exit 0
          else
            echo "‚ùå Health check failed (attempt $i/12)"
            echo "Error details: $response"

            # Test direct EC2 endpoint as fallback
            if curl -f -s http://${{ secrets.ALB_MANAGER_IP }}:8080/health >/dev/null; then
              echo "‚ÑπÔ∏è  Direct EC2 endpoint is responding - ALB may need more time"
            else
              echo "‚ö†Ô∏è  Direct EC2 endpoint also not responding"
            fi
          fi

          if [ $i -eq 12 ]; then
            echo "üí• Health check failed after 12 attempts (6 minutes)"
            echo "Gathering debug information..."

            # Debug information
            ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.ALB_MANAGER_IP }} << 'DEBUG_EOF'
              echo "=== Docker Service Status ==="
              docker service ls
              echo "=== Service Logs ==="
              docker service logs todoapp_todoapp --tail 20
              echo "=== Container Status ==="
              docker ps
            DEBUG_EOF

            exit 1
          fi

          echo "‚è≥ Retrying in 30 seconds..."
          sleep 30
        done

    - name: Post-deployment verification
      run: |
        echo "Deployment completed successfully!"
        echo "Application available at: http://${{ secrets.ALB_DNS_NAME }}"
        echo "API documentation: http://${{ secrets.ALB_DNS_NAME }}/swagger"

  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    name: Rollback on Failure
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH for Rollback
      run: |
        echo "üîß Setting up SSH for rollback operation..."
        mkdir -p ~/.ssh
        echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # SSH config for rollback
        cat > ~/.ssh/config << 'EOF'
        Host *
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
          ConnectTimeout 30
        EOF

        # Quick ssh-keyscan for rollback
        timeout 30 ssh-keyscan -H ${{ secrets.ALB_MANAGER_IP }} >> ~/.ssh/known_hosts 2>/dev/null || true

    - name: Emergency Rollback
      run: |
        echo "üö® EMERGENCY ROLLBACK INITIATED üö®"
        echo "Attempting to rollback failed deployment..."

        ssh -i ~/.ssh/id_rsa -o ConnectTimeout=30 ec2-user@${{ secrets.ALB_MANAGER_IP }} << 'ROLLBACK_EOF'
          set -e
          echo "=== Pre-Rollback Status ==="
          docker service ls
          docker service ps todoapp_todoapp --no-trunc | head -10

          echo "=== Attempting Docker Service Rollback ==="
          if docker service rollback todoapp_todoapp; then
            echo "‚úÖ Docker service rollback command issued successfully"

            # Wait for rollback to complete
            echo "‚è≥ Waiting for rollback to complete..."
            sleep 30

            echo "=== Post-Rollback Status ==="
            docker service ls
            docker service ps todoapp_todoapp --no-trunc | head -5

            # Test if rollback was successful
            if docker service ps todoapp_todoapp --filter "desired-state=running" | grep -q "Running"; then
              echo "‚úÖ Rollback appears successful - service is running"
            else
              echo "‚ö†Ô∏è  Rollback completed but service may not be healthy"
            fi
          else
            echo "‚ùå Docker service rollback failed"
            echo "Attempting manual recovery..."

            # Manual recovery attempt
            echo "=== Manual Recovery Attempt ==="
            docker service update --image codecrasher2/todoapp:latest todoapp_todoapp || \
            echo "‚ö†Ô∏è  Manual recovery also failed - manual intervention required"
          fi

          echo "=== Final Service State ==="
          docker service ls
          docker service logs todoapp_todoapp --tail 10
        ROLLBACK_EOF

        echo "üîç Rollback operation completed. Check logs above for status."

    - name: Notify Rollback Status
      if: always()
      run: |
        echo "=== ROLLBACK SUMMARY ==="
        echo "üî¥ Deployment failed and rollback was attempted"
        echo "üìã Manual verification recommended:"
        echo "   ‚Ä¢ SSH to manager: ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.ALB_MANAGER_IP }}"
        echo "   ‚Ä¢ Check services: docker service ls"
        echo "   ‚Ä¢ Check logs: docker service logs todoapp_todoapp --tail 20"
        echo "   ‚Ä¢ Health check: curl http://${{ secrets.ALB_DNS_NAME }}/health"