name: CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOCKER_IMAGE: codecrasher2/todoapp
  REGISTRY: docker.io

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Application

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: dotnet test --no-build --configuration Release --verbosity normal

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    name: Build and Push Docker Image

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    name: Deploy to AWS Swarm

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1

    - name: Deploy to Docker Swarm via SSM
      run: |
        # Get the new image tag (SHA-based)
        IMAGE_TAG="${{ env.DOCKER_IMAGE }}:master-${{ github.sha }}"

        # Send deployment commands via SSM using JSON format
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids "${{ secrets.SWARM_MANAGER_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["docker service update --image '"$IMAGE_TAG"' todoapp_todoapp","echo \"Waiting for service update to complete...\"","sleep 30","docker service ps todoapp_todoapp --no-trunc","docker service logs todoapp_todoapp --tail 10"]}' \
          --output text --query 'Command.CommandId')

        echo "Command ID: $COMMAND_ID"

        # Wait for command to complete
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.SWARM_MANAGER_INSTANCE_ID }}"

    - name: Get deployment results
      run: |
        # Get command output
        aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ secrets.SWARM_MANAGER_INSTANCE_ID }}" \
          --query 'StandardOutputContent' \
          --output text

    - name: Verify deployment health
      run: |
        # Final health check via SSM using JSON format
        aws ssm send-command \
          --instance-ids "${{ secrets.SWARM_MANAGER_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --parameters '{"commands":["RUNNING_SERVICES=$(docker service ls --filter name=todoapp_todoapp --format \"{{.Replicas}}\")","echo \"Service replicas: $RUNNING_SERVICES\"","docker service ps todoapp_todoapp --filter \"desired-state=running\"","echo \"Deployment completed successfully\""]}'